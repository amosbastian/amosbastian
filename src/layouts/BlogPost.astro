---
import type { InferGetStaticPropsType } from "astro";
import { type Props as AstroSEOProps } from "astro-seo";
import { Schema } from "astro-seo-schema";
import { getEntry } from "astro:content";
import Container from "~/components/Container.astro";
import Layout from "~/layouts/Layout.astro";
import type { getStaticPaths } from "~/pages/blog/[...slug].astro";

type Props = InferGetStaticPropsType<typeof getStaticPaths> & AstroSEOProps;

const { slug } = Astro.params;
const { post } = Astro.props;
const frontmatter = post.data;
const authors = await Promise.all(post.data.authors.map((author) => getEntry(author)));
---

<Schema
  item={{
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    headline: frontmatter.metaTitle ?? frontmatter.title,
    name: frontmatter.metaTitle ?? frontmatter.title,
    description: frontmatter.metaDescription ?? frontmatter.description,
    image: frontmatter.coverImage
      ? {
          "@type": "ImageObject",
          url: frontmatter.coverImage.src,
          width: `${frontmatter.coverImage.width}`,
          height: `${frontmatter.coverImage.height}`,
        }
      : undefined,
    datePublished: new Date(frontmatter.datePublished).toISOString(),
    dateModified: frontmatter.dateModified ? new Date(frontmatter.dateModified).toISOString() : undefined,
    author: authors.map((author) => {
      return {
        "@type": "Person",
        birthPlace: author.data.birthPlace
          ? {
              "@type": "Place",
              address: author.data.birthPlace.address,
            }
          : undefined,
        birthDate: author.data.birthDate ? new Date(author.data.birthDate).toISOString() : undefined,
        familyName: author.data.familyName,
        givenName: author.data.givenName,
        image: author.data.image ? author.data.image.src : undefined,
      };
    }),
    isPartOf: {
      "@type": "Blog",
      "@id": `/blog`,
      name: "amos bastian's blog.",
    },
    url: `/${slug}`,
  }}
/>
<Schema
  item={{
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    itemListElement: [
      {
        "@type": "ListItem",
        position: 1,
        name: "amos bastian.",
        item: `/`,
      },
      {
        "@type": "ListItem",
        position: 2,
        name: "blog.",
        item: `/blog`,
      },
      {
        "@type": "ListItem",
        position: 2,
        name: frontmatter.title,
        item: `/blog/${slug}`,
      },
    ],
  }}
/>

<Layout title={frontmatter.metaTitle} description={frontmatter.metaDescription}>
  <Container>
    <slot />
  </Container>
</Layout>
